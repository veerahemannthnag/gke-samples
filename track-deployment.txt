#!/bin/bash

# Function to check rollout status and report
function check_rollout_status() {
  deployment_name="$1"

  # Get rollout status using kubectl
  rollout_status=$(kubectl rollout status deployment/"$deployment_name" 2>&1)

  # Check for errors in kubectl command or rollout status
  if [[ $? -ne 0 ]]; then
    echo "Error getting rollout status for deployment: $deployment_name"
    echo "$rollout_status"
    exit 1
  fi

  # Extract desired pods and current new/old pods (or handle errors)
  desired_pods=$(echo "$rollout_status" | grep -Eo 'desired replicas (\d+)' | grep -Eo '\d+' || echo "Unable to determine desired pods")
  new_pods=$(echo "$rollout_status" | grep -Eo 'new replicas (\d+)' | grep -Eo '\d+' || echo "Unable to determine new pods")
  old_pods=$(echo "$rollout_status" | grep -Eo 'old replicas (\d+)' | grep -Eo '\d+' || echo "Unable to determine old pods")

  # Check if rollout is complete (desired pods == new pods)
  if [[ "$desired_pods" -eq "$new_pods" ]]; then
    echo "Deployment $deployment_name rollout successful!"
  else
    echo "Deployment $deployment_name rollout failed!"
    echo "  Desired pods: $desired_pods"
    echo "  New pods:      $new_pods"
    echo "  Old pods:      $old_pods"
    # Consider adding logic to check events for specific error messages
  fi
}

# Get deployment name (optional argument)
deployment_name="${1:-}"

# Check if deployment name is provided
if [[ -z "$deployment_name" ]]; then
  echo "Usage: $0 <deployment_name>"
  exit 1
fi

# Check rollout status
check_rollout_status "$deployment_name"
